RAM Usage
Address     | Usage
------------|----------------------------------------------------------------
0-15        | sixteen virtual registers
16-255      | static variables (of all the VM functions in the VM program)
256-2047    | Stack
2048-16384  | Heap (used to store objects and arrays)
16384-24575 | Memory mapped I/O


Registers  | Name | Usage
-----------|------|------------------------------------------------------------------
RAM[0]     | SP   | Stack pointer. points to the next topmost location in the stack
RAM[1]     | LCL  | Points to the base of the current VM function's local segment
RAM[2]     | ARG  | Points to the base of the current VM function's argument segment
RAM[3]     | THIS | Points to the base of the current this segment (within the heap)
RAM[4]     | THAT | Points to the base of the current that segment (within the heap)
RAM[5-12]  |      | Holds the contents of the temp segment
RAM[13-15] |      | Can be used by the VM implementation as general purpose registers

where do the segments start and stop


Segments
    argument
    local
    static
    constant
    this
    that
    pointer
    temp

Command Types:
    C_ARITHMETIC
    C_PUSH
    C_POP
    C_LABEL
    C_GOTO
    C_IF
    C_FUNCTION
    C_RETURN
    C_CALL

Testing:
    create the assm file from the vm file
    use the emulator and check out the output vs the expected file

//////////////////////////////////////////
// push 7, push 8 , add
// push 7
@7
D=A
@256
MD=D

// update stack pointer
@SP
M=M+1

// push 8
@8
D=A
@257
MD=D

// update stack pointer
@SP
M=M+1

@256
MD=M+D
@SP
M=M-1
//////////////////////////////////////////

//////////////////////////////////////////
// Push //////////////////////////////////
// push constant 7

// push
@7
D=A
@256
MD=D
@SP // update stack pointer
M=M+1

//////////////////////////////////////////
// Arithmetic ////////////////////////////
first argument in binary op is the bottom element on stack




First comp
