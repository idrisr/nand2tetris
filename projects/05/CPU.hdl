// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // numbers based on markings in cpu_diagram.png

    // writeM. based on 3rd d bit and whether it's a C-insruction
    And(a=instruction[3], b=instruction[15], out=writeM);

    // 2
    // Inputs: 1 and ALU out
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=outm2);

    // 3
    // load if A instruction, or d-A bit set
    Not(in=instruction[15], out=aload); // If A instruction, load the value
    ARegister(in=instruction, load=aload, out=outA, out[0..14]=addressM);

    // 4
    // load = 2nd d bit and C-instruction
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=aluout, load=dload, out=outD);

    // 5
    // A or M based on a bit
    // wheter the ALU will operate on A register or memory input
    // based on a-bit
    Mux16(a=inM, b=outA, sel=instruction[12], out=outM5);

    // 6 
    // ba9876
    // cccccc bits set to zx thru no
    // If A instruction (instruction[15]=0), have ALU output x
    //     zy&ny=1, others=0

    Mux(a=false , b=instruction[11] , sel=instruction[15] , out=czx);
    Mux(a=false , b=instruction[10] , sel=instruction[15] , out=cnx);
    Mux(a=true  , b=instruction[9]  , sel=instruction[15] , out=czy);
    Mux(a=true  , b=instruction[8]  , sel=instruction[15] , out=cny);
    Mux(a=false , b=instruction[7]  , sel=instruction[15] , out=cf);
    Mux(a=false , b=instruction[6]  , sel=instruction[15] , out=cno);

    ALU(x=outD, y=outM5, 
        zx=czx,
        nx=cnx,
        zy=czy,
        ny=cny,
        f =cf,
        no=cno,
        out=aluout, out=outM, zr=zr, ng=ng);

    // Whether to jump
    // based on ng, zr & ps i know which jbit interests me
    // so get the right j bit
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=ps);

    And(a=ng, b=instruction[2], out=ang);
    And(a=zr, b=instruction[1], out=azr);
    And(a=ps, b=instruction[0], out=aps);

    // if ng, j1, and(j1, ng)
    // if zr, j2  and(j2, zr)
    // if ps, j3  and(j3, ps)
    Mux4Way(a=aps, b=azr, c=ang, d=false, sel[1]=ng, sel[0]=zr, out=jump);

    // 7
    // If we have a jump, the PC is loaded with A's output
    // Otherwise increment by 1
    // I believe inc is always true, because you always want it to at least increment
    // load is whether the jump condition is satisfied
    // I believe the jbool is a function of the ALU output status bits zr and ng
    PC(in=outA , load=jump, inc=true, reset=reset, out[0..14]=pc);
}
